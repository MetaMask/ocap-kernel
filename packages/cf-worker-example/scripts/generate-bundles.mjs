#!/usr/bin/env node
import { readFileSync, writeFileSync } from 'node:fs';
import { join, dirname } from 'node:path';
import { fileURLToPath } from 'node:url';

const __dirname = dirname(fileURLToPath(import.meta.url));
const projectRoot = join(__dirname, '..');

/**
 * Convert a bundle object to a data URI.
 *
 * @param {object} bundle - The bundle object to convert.
 * @returns {string} A data URI containing the bundle.
 */
function bundleToDataUri(bundle) {
  const bundleJson = JSON.stringify(bundle);
  const base64 = Buffer.from(bundleJson).toString('base64');
  return `data:application/json;base64,${base64}`;
}

console.log('Generating bundles.ts from bundle files...');

// Read the counter vat bundle
const counterBundlePath = join(projectRoot, 'src', 'counter-vat.bundle');
const counterBundle = JSON.parse(readFileSync(counterBundlePath, 'utf-8'));
const counterBundleUri = bundleToDataUri(counterBundle);

// Generate the TypeScript file
const tsContent = `/**
 * Embedded vat bundles as data URIs.
 * This file is auto-generated by scripts/generate-bundles.mjs during the build process.
 * DO NOT EDIT MANUALLY.
 */

/**
 * Counter vat bundle as a data URI.
 * Bundle size: ${JSON.stringify(counterBundle).length} bytes
 * Data URI size: ${counterBundleUri.length} bytes
 */
export const counterBundleUri = ${JSON.stringify(counterBundleUri)};
`;

// Write the generated file
const outputPath = join(projectRoot, 'src', 'bundles.ts');
writeFileSync(outputPath, tsContent, 'utf-8');

console.log(`Generated ${outputPath}`);
console.log(`  Bundle size: ${JSON.stringify(counterBundle).length} bytes`);
console.log(`  Data URI size: ${counterBundleUri.length} bytes`);

