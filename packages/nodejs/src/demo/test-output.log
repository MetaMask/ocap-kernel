[?25l
 RUN  v3.0.4 ~/ocap-kernel/packages/nodejs
      Coverage enabled with istanbul

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
dbPath: /var/folders/rf/xk9gv43x5mx80gq6h2mjq6h80000gn/T/db/store.db

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
[sqlite] 
    CREATE TABLE IF NOT EXISTS kv (
      key TEXT,
      value TEXT,
      PRIMARY KEY(key)
    )
  

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('queue.run.head', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('queue.run.tail', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'queue.run.head'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'queue.run.tail'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextVatId'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextRemoteId'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextObjectId'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextPromiseId'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'queue.run.head'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'queue.run.tail'
  

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
[sqlite] BEGIN
[sqlite] 
    DROP TABLE kv
  
[sqlite] 
    CREATE TABLE IF NOT EXISTS kv (
      key TEXT,
      value TEXT,
      PRIMARY KEY(key)
    )
  
[sqlite] COMMIT
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('queue.run.head', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('queue.run.tail', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'queue.run.head'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'queue.run.tail'
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextVatId'
  
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('nextVatId', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextRemoteId'
  
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('nextRemoteId', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextObjectId'
  
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('nextObjectId', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    SELECT value
    FROM kv
    WHERE key = 'nextPromiseId'
  
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('nextPromiseId', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('nextVatId', '2')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[vat worker service] launching vat v1

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
[vat worker service] connected to kernel

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('e.nextPromiseId.v1', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[sqlite] 
    INSERT INTO kv (key, value)
    VALUES ('e.nextObjectId.v1', '1')
    ON CONFLICT DO UPDATE SET value = excluded.value
  
[vat v1] Sending message to vat Object <[Object: null prototype] {}> { method: [32m'ping'[39m, params: [1mnull[22m }

stdout | src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
[vat v1] Sending message to vat Object <[Object: null prototype] {}> {
  method: [32m'initVat'[39m,
  params: Object <[Object: null prototype] {}> {
    bundleSpec: [32m'http://localhost:3000/local-static.bundle'[39m,
    parameters: Object <[Object: null prototype] {}> { name: [32m'local-static'[39m }
  }
}

dbPath: /tmp/db/store.db
[vat-v1] 
    CREATE TABLE IF NOT EXISTS kv (
      key TEXT,
      value TEXT,
      PRIMARY KEY(key)
    )
  
VatSupervisor requested user code load: Object <[Object: null prototype] {}> {
  bundleSpec: 'http://localhost:3000/local-static.bundle',
  parameters: Object <[Object: null prototype] {}> { name: 'local-static' }
}
Unexpected read error from VatSupervisor "v1" [TypeError <Object <Object <[Object: null prototype] {}>>>: fetch failed
  at async VatSupervisor._VatSupervisor_initVat (packages/kernel/dist/VatSupervisor.mjs:190:21)
  at async VatSupervisor.handleMessage (packages/kernel/dist/VatSupervisor.mjs:90:40)
  at async NodeWorkerDuplexStream.drain (packages/streams/dist/BaseDuplexStream.mjs:201:13)
  at async Promise.all (index 0)] {
  [cause]: [AggregateError
    at internalConnectMultiple (node:net:1117:18)
    at afterConnectMultiple (node:net:1684:7)] {
    code: 'ECONNREFUSED',
    [errors]: [ [Error <Complex prototype>], [Error <Complex prototype>] ]
  }
}
 ❯ |nodejs| src/demo/run.test.ts (1 test | 1 failed) 2010ms
   × Kernel Worker > launches vat "local-static" 2008ms
     → Test timed out in 2000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".

⎯⎯⎯⎯⎯⎯⎯ Failed Tests 1 ⎯⎯⎯⎯⎯⎯⎯

 FAIL  |nodejs| src/demo/run.test.ts > Kernel Worker > launches vat "local-static"
Error: Test timed out in 2000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/1]⎯


 Test Files  1 failed (1)
      Tests  1 failed (1)
   Start at  12:19:55
   Duration  2.59s (transform 215ms, setup 14ms, collect 327ms, tests 2.01s, environment 0ms, prepare 61ms)

[?25h