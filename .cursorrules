
Code Style and Structure:
- Write concise, accurate JavaScript/TypeScript with modern ES Module syntax.
- Use a class-based structure where applicable.
- Use `harden()` from SES for object security.
- Integrate Superstruct for validation and TypeDoc for documentation.
- Use descriptive variable names (`isKernelActive`, `hasVatAccess`).
- Follow consistent naming conventions:
  - CamelCase for functions and variables.
  - PascalCase for class names.
  - File names: lowercase with underscores (e.g., `kernel_worker.js`).
- Structure files logically:
  - `src/` for source files.
  - `.test.ts` suffix for test files co-located with source files.

File and Directory Structure:
- Maintain a monorepo structure using Yarn workspaces.
- Use lowercase with underscores for package names and file names.
- Co-locate a package's unit tests with their covered source files in the `<package-root>/src/` directory (e.g. `kernel/src/kernel-worker.ts` should be tested in `kernel/src/kernel-worker.test.ts`).
- Test utilities used by a single package should be separated into that package's `<package-root>/test/` directory
- Test utilities used by multiple packages should be relocated into the dedicated `test-utils` package.

TypeScript Usage:
- Prioritize TypeScript for type safety and maintainability.
- Use types for defining message structures and data contracts.
- Leverage union types and type guards for robust runtime checks.
- Use `Readonly<T>` for immutable data structures.
- Follow strict mode settings for TypeScript.

Kernel Architecture:
- Ensure clear separation of concerns between Kernel, Vat, and Supervisor components.
- Implement secure, stream-based message passing with ocap security patterns.
- Manage permissions tightly in Chrome extensions using the principle of least privilege.
- Optimize state management across all environments.

Manifest and Permissions:
- Use the latest manifest version (v3) for Chrome.
- Minimize permissions in `manifest.json`, using optional permissions where feasible.

Security and Privacy:
- Apply Content Security Policies (CSP) in `manifest.json`.
- Utilize SES, Endo's hardened objects, and ocap security patterns.

UI and Styling:
- Create responsive designs for UI components like popups or settings.
- Use Flexbox or CSS Grid for layout consistency.

Performance Optimization:
- Use event-driven background pages to minimize resource usage.
- Optimize message handling in kernel components for Chrome extensions.

Browser API and Endo Framework Usage:
- Utilize Chrome and Endo APIs with robust error handling and validation.
- Follow Chrome's best practices and secure object capability principles.

Cross-environment Compatibility:
- Ensure seamless functionality across Chrome extensions, Node.js CLI, and other environments.
- Implement graceful degradation for environment-specific features.

Code Style and Testing:
- Never use the `any` type.
- Use explicit return types for all functions.
- Prefer `toStrictEqual()` for deep object comparisons in tests.
- Use `it.each()` for parameterized tests.
- Use descriptive test blocks with proper nesting.
- Mock functions with `vi.fn()` and explicit return types.

Type Safety:
- Use union types and type guards.
- Define interfaces for all data structures.
- Avoid redundant type declarations.

Error Handling:
- Use structured error classes with inheritance, error codes, and messages.
- Implement error marshaling and unmarshaling.
- Use type guards for error checking.

Documentation:
- Use JSDoc and TypeDoc for public APIs.
- Include examples and document error cases.

Testing and Debugging:
- Aim for high test coverage, including unit and integration tests.
- Mock external dependencies properly.
- Use Chrome DevTools and node-based tools for debugging.
- Use Vite for efficient builds in development and production.

Context-Aware Development:
- Align new code with existing project structure for consistency.
- Prioritize modular, reusable components.

Code Output:
- Provide complete, self-contained examples.
- Include necessary imports and context for code snippets.
- Document significant changes, especially for Endo-specific patterns or Chrome APIs.
